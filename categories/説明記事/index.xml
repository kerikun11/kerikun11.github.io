<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>説明記事 on KERI&#39;s Lab</title>
    <link>https://kerikeri.top/categories/%E8%AA%AC%E6%98%8E%E8%A8%98%E4%BA%8B/</link>
    <description>Recent content in 説明記事 on KERI&#39;s Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>kerikun11&#43;web@gmail.com (けり)</managingEditor>
    <webMaster>kerikun11&#43;web@gmail.com (けり)</webMaster>
    <lastBuildDate>Sat, 25 Apr 2020 14:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://kerikeri.top/categories/%E8%AA%AC%E6%98%8E%E8%A8%98%E4%BA%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>なめらかなスラロームの設計④ 生成結果</title>
      <link>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-4/</link>
      <pubDate>Sat, 25 Apr 2020 14:00:00 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kerikeri.top/posts/2020-04-25-slalom-trajectory-3/&#34;&gt;前回の記事&lt;/a&gt;
の続きです．&lt;/p&gt;
&lt;p&gt;今回の記事では，
前回までに紹介してきた内容をもとに，
&lt;a href=&#34;https://kerikeri.top/posts/2017-09-03-pattern-of-turn/&#34;&gt;マイクロマウスの走行パターン&lt;/a&gt;
の軌道設計結果を紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なめらかなスラロームの設計③ C&#43;&#43;による実装</title>
      <link>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-3/</link>
      <pubDate>Sat, 25 Apr 2020 13:00:00 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kerikeri.top/posts/2020-04-25-slalom-trajectory-2/&#34;&gt;前回の記事&lt;/a&gt;
の続きです．&lt;/p&gt;
&lt;p&gt;今回の記事では，なめらかなスラローム軌道の C++による実装例を紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なめらかなスラロームの設計② 設計方法</title>
      <link>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-2/</link>
      <pubDate>Sat, 25 Apr 2020 12:00:00 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kerikeri.top/posts/2020-04-25-slalom-trajectory-1/&#34;&gt;前回の記事&lt;/a&gt;
の続きです．&lt;/p&gt;
&lt;p&gt;今回の記事では，なめらかなスラローム軌道の具体的な設計方法を紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なめらかなスラロームの設計① スラローム概要</title>
      <link>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-1/</link>
      <pubDate>Sat, 25 Apr 2020 11:00:00 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-04-25-slalom-trajectory-1/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;今回はマイクロマウスにおけるスラローム走行のお話です．&lt;/p&gt;
&lt;p&gt;私が使っているスラローム走行の概要とその軌道の生成方法などを紹介します．&lt;/p&gt;
&lt;p&gt;特にマイクロマウスを例に話を進めますが，2輪車両の軌道生成方法として汎用的に使える内容です．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linuxで画面を3分割して表示する</title>
      <link>https://kerikeri.top/posts/2020-04-10-linux-split-3-windows/</link>
      <pubDate>Fri, 10 Apr 2020 11:13:33 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-04-10-linux-split-3-windows/</guid>
      <description>&lt;p&gt;こんにちは．けりです．&lt;/p&gt;
&lt;p&gt;最近，縦横比が21:9のウルトラワイドモニタを購入しました．&lt;/p&gt;
&lt;p&gt;今回は，そのモニタの画面を3列に分割してウィンドウを配置する方法を紹介します．&lt;/p&gt;
&lt;p&gt;私のPCのOSは &lt;strong&gt;Manjaro Linux (Cinnamon)&lt;/strong&gt; ですが，他のLinuxでも使える方法だと思います．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マイクロマウスの迷路探索概要</title>
      <link>https://kerikeri.top/posts/2020-04-07-maze-solving-algorithm/</link>
      <pubDate>Tue, 07 Apr 2020 14:10:54 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-04-07-maze-solving-algorithm/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;この記事では，
マイクロマウス探索初心者向けに，
マイクロマウスの迷路探索アルゴリズムに必要な処理とアルゴリズムの概要について記述する．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UNIX環境の設定ファイルの管理</title>
      <link>https://kerikeri.top/posts/2020-04-06-dotfiles/</link>
      <pubDate>Mon, 06 Apr 2020 10:17:40 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-04-06-dotfiles/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;今回は、ターミナルなどの設定ファイルの管理方法の紹介です。&lt;/p&gt;
&lt;p&gt;設定ファイルの多くは &lt;code&gt;.zshrc&lt;/code&gt; というようにドットから始まる隠しファイルになっているので、
これらをまとめて &lt;code&gt;.dotfiles&lt;/code&gt; と呼んでいます。&lt;/p&gt;
&lt;p&gt;GitHubに.dotfilesを保存していつでも最新のものを使えるようにしています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>過去の全日本マイクロマウス大会32x32迷路の分析</title>
      <link>https://kerikeri.top/posts/2020-03-08-all-japan-32x32-maze/</link>
      <pubDate>Sun, 08 Mar 2020 16:26:06 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2020-03-08-all-japan-32x32-maze/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;こんにちは．けりです．&lt;br&gt;
今回はマイクロマウスの迷路探索のお話です．&lt;/p&gt;
&lt;p&gt;過去10年分のマイクロマウス全日本大会の32x32迷路を比較してみました．&lt;/p&gt;
&lt;p&gt;まずは探索走行の比較を，次に最短経路の比較を紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VSCodeでTeXを書こう</title>
      <link>https://kerikeri.top/posts/2019-01-14-vscode-latex/</link>
      <pubDate>Mon, 14 Jan 2019 10:00:00 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2019-01-14-vscode-latex/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;今回は私が使っているTeXのエディタ環境を紹介します．&lt;/p&gt;
&lt;p&gt;注目機能は以下の通りです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コード補完&lt;/li&gt;
&lt;li&gt;コード整形&lt;/li&gt;
&lt;li&gt;環境に依存しにくい&lt;a href=&#34;https://texwiki.texjp.org/?Latexmk&#34; target=&#34;_blank&#34;&gt;.latexmk&lt;/a&gt;
でコンパイル&lt;/li&gt;
&lt;li&gt;散らかりがちな生成物を &lt;code&gt;build&lt;/code&gt; ディレクトリにまとめる&lt;/li&gt;
&lt;li&gt;TeXコードのとなりにPDFを表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SyncTex&lt;/code&gt;によりTeXコードとPDFの相互ジャンプ&lt;/li&gt;
&lt;li&gt;VSCode Vim を使ってvimキーバインド (オプション)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>PlatformIOでESP32の開発をしよう</title>
      <link>https://kerikeri.top/posts/2018-12-22-platformio/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-12-22-platformio/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;この記事は &lt;a href=&#34;https://adventar.org/calendars/3279&#34; target=&#34;_blank&#34;&gt;rogy Advent Calendar 2018&lt;/a&gt;
 の
22日目の記事です．&lt;/p&gt;
&lt;p&gt;こんにちは．けりです．&lt;/p&gt;
&lt;p&gt;今回は，PlatformIOという強力な&lt;strong&gt;マイコン開発環境&lt;/strong&gt;の紹介です．&lt;/p&gt;
&lt;h3 id=&#34;platformio-とは&#34;&gt;PlatformIO とは？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://platformio.org/&#34; target=&#34;_blank&#34;&gt;PlatformIO&lt;/a&gt;
とは，mbedやArduinoと似たような感じで，さまざまなボードやライブラリを統一的に開発できる開発環境です．&lt;/p&gt;
&lt;p&gt;PlatformIO はESP32マイコンを公式にサポートしていて，&lt;a href=&#34;https://github.com/espressif/esp-idf&#34; target=&#34;_blank&#34;&gt;ESP-IDF&lt;/a&gt;
と&lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34; target=&#34;_blank&#34;&gt;Arduino Core for the ESP32&lt;/a&gt;
から選んで開発することができます．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>吸引ファンで音を鳴らす</title>
      <link>https://kerikeri.top/posts/2018-11-03-fan-sound/</link>
      <pubDate>Sat, 03 Nov 2018 18:40:42 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-11-03-fan-sound/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;マイクロマウスでは，User Interface (UI) のために，スピーカーを載せることが多いです．&lt;/p&gt;
&lt;p&gt;しかしながら，小さなマウスを作るうえで，そのわずかなスペースでも惜しいものです．&lt;/p&gt;
&lt;p&gt;今回は，既にマウスに乗っている&lt;strong&gt;モーター&lt;/strong&gt;で音を鳴らすことができたので紹介します．&lt;/p&gt;
&lt;p&gt;偶然ですが，&lt;a href=&#34;https://kerikeri.top/posts/2018-05-03-kerise-v4-coming/&#34;&gt;KERISEv4&lt;/a&gt;
には(ほとんど使われていない)&lt;strong&gt;吸引ファン&lt;/strong&gt;がついていたので，今回はそれを使ってみました．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32 の Power Management 機能</title>
      <link>https://kerikeri.top/posts/2018-06-28-esp32-power-management/</link>
      <pubDate>Thu, 28 Jun 2018 08:50:59 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-06-28-esp32-power-management/</guid>
      <description>&lt;p&gt;この記事では，ESP32をバッテリー駆動するためのヒントをお届けします．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なめらかな加速の設計④ C&#43;&#43;による実装例</title>
      <link>https://kerikeri.top/posts/2018-04-29-accel-designer4/</link>
      <pubDate>Sun, 29 Apr 2018 15:35:38 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-04-29-accel-designer4/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kerikeri.top/posts/2018-04-29-accel-designer3/&#34;&gt;前回の記事&lt;/a&gt;
の続きです．&lt;/p&gt;
&lt;p&gt;今回の記事では，今までに示した設計法のC++による実装例を紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なめらかな加速の設計③ 走行距離を考慮した速度設計</title>
      <link>https://kerikeri.top/posts/2018-04-29-accel-designer3/</link>
      <pubDate>Sun, 29 Apr 2018 14:35:38 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-04-29-accel-designer3/</guid>
      <description>&lt;h2 id=&#34;設計2走行距離を考慮した速度設計&#34;&gt;設計2・走行距離を考慮した速度設計&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kerikeri.top/posts/2018-04-29-accel-designer2/&#34;&gt;前回の記事&lt;/a&gt;
の続きです．&lt;/p&gt;
&lt;p&gt;この記事では，設計1の曲線加速を組み合わせて，走行距離を考慮した速度設計について考えます．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なめらかな加速の設計② 曲線加速の設計</title>
      <link>https://kerikeri.top/posts/2018-04-29-accel-designer2/</link>
      <pubDate>Sun, 29 Apr 2018 13:35:38 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-04-29-accel-designer2/</guid>
      <description>&lt;h2 id=&#34;設計1加速曲線の設計&#34;&gt;設計1・加速曲線の設計&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kerikeri.top/posts/2018-04-29-accel-designer1/&#34;&gt;前回の記事&lt;/a&gt;
の続きです．&lt;/p&gt;
&lt;p&gt;この記事では，前回紹介した&lt;strong&gt;設計1&lt;/strong&gt;の曲線加速の設計について考えます．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なめらかな加速の設計① 台形加速と曲線加速</title>
      <link>https://kerikeri.top/posts/2018-04-29-accel-designer1/</link>
      <pubDate>Sun, 29 Apr 2018 12:35:38 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-04-29-accel-designer1/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;今回はマイクロマウスにおける速度設計のお話です．&lt;/p&gt;
&lt;p&gt;長い直線などを走行するとき，タイムを縮めるため，最大速度まで加速して，ターン直前に減速します．&lt;/p&gt;
&lt;p&gt;ここで注意したのが，途中経過の如何にかかわらず，終点の位置や速度は守らなければならないということです．&lt;/p&gt;
&lt;p&gt;今回の記事では，終点位置，終点速度や最大速度などの拘束条件から，走行途中の速度軌道を算出するアルゴリズムを紹介します．&lt;/p&gt;
&lt;p&gt;最後にはC++での実装したクラスも簡単に紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32にSmartConfigでWiFi情報を伝える</title>
      <link>https://kerikeri.top/posts/2018-02-16-esp32-smartconfig/</link>
      <pubDate>Fri, 16 Feb 2018 18:51:25 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2018-02-16-esp32-smartconfig/</guid>
      <description>&lt;h2 id=&#34;wifiのssidとパスワードをどう伝えるか問題&#34;&gt;WiFiのSSIDとパスワードをどう伝えるか問題&lt;/h2&gt;
&lt;p&gt;ESP32はWiFiに接続することができますが，ソースコードにWiFiのSSIDとパスワードを書いてしまうと，後から変更できません．&lt;/p&gt;
&lt;p&gt;さらに，ソースコードを公開するときは，SSIDとパスワードの部分をいちいち削除しなければならず，けっこう面倒です．&lt;/p&gt;
&lt;p&gt;以前は&lt;a href=&#34;https://kerikeri.top/posts/2017-07-29-esp32-wifi-sd/&#34;&gt;SDカードを使ってWiFi情報を伝える方法&lt;/a&gt;
を紹介しましたが，これも割と手間でした．&lt;/p&gt;
&lt;p&gt;SmartConfigとは，そんな悩みをスマホで解決する機能です．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32のすゝめ</title>
      <link>https://kerikeri.top/posts/2017-12-06-introduction-to-esp32/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2017-12-06-introduction-to-esp32/</guid>
      <description>&lt;p&gt;こんにちは，けりです．&lt;br&gt;
これは &lt;a href=&#34;https://adventar.org/calendars/2361&#34; target=&#34;_blank&#34;&gt;rogy Advent Calender 2017&lt;/a&gt;
 の6日目の記事です.&lt;/p&gt;
&lt;p&gt;本日は，私が愛用しているマイコン「ESP32」を紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>フォトリフレクタの感度をソフトで調整</title>
      <link>https://kerikeri.top/posts/2017-10-20-2range-reflector/</link>
      <pubDate>Fri, 20 Oct 2017 12:15:04 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2017-10-20-2range-reflector/</guid>
      <description>&lt;p&gt;こんにちは．けりです．&lt;br&gt;
今回は，マイクロマウスに使っているフォトリフレクタのお話です．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マイクロマウスのターン一覧</title>
      <link>https://kerikeri.top/posts/2017-09-03-pattern-of-turn/</link>
      <pubDate>Sun, 03 Sep 2017 18:32:03 +0900</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2017-09-03-pattern-of-turn/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;こんにちは，けりです．久々にマイクロマウスの話題です．&lt;/p&gt;
&lt;p&gt;今回は，私のマウスで使用しているスラロームパターンを紹介します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32とMicro SDカード</title>
      <link>https://kerikeri.top/posts/2017-07-29-esp32-wifi-sd/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2017-07-29-esp32-wifi-sd/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;今回は，ESP32で何か作るときはとりあえず一緒にMicro SDスロットも載せましょうという話です．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32でデュアルコアを使おう！</title>
      <link>https://kerikeri.top/posts/2017-06-24-esp32-dual-core/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2017-06-24-esp32-dual-core/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;h3 id=&#34;esp32とは&#34;&gt;ESP32とは&lt;/h3&gt;
&lt;figure &gt;
	
		
		&lt;figcaption&gt;
			&lt;h4&gt;ESP32&lt;/h4&gt;
		&lt;/figcaption&gt;
		
		&lt;img src=&#34;esp32.jpg&#34; alt=&#34;ESP32&#34; style=&#34;width: 240px;&#34;/&gt;
	
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://www.espressif.com/en/products/hardware/esp32/overview&#34; target=&#34;_blank&#34;&gt;ESP32 Overview | Espressif Systems&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;ESP32は上海の企業であるEspressif Systemsから発売されているWiFi&amp;amp;Bluetoothモジュールです．同時にgccで開発できるマイコンでもあります．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32の設定管理ライブラリの紹介</title>
      <link>https://kerikeri.top/posts/2017-06-16-esp32-preferences/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2017-06-16-esp32-preferences/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;みなさん，ESP32使ってますか？僕は使っています．その偉大さには驚くばかりです．&lt;/p&gt;
&lt;p&gt;さて，今回紹介するのは，Arduino core for ESP32に含まれているライブラリ「&lt;a href=&#34;https://github.com/espressif/arduino-esp32/tree/master/libraries/Preferences&#34; target=&#34;_blank&#34;&gt;Preferences&lt;/a&gt;
」です．&lt;/p&gt;
&lt;p&gt;ESP32で何か物を作るとき，電源を切っても保存しておきたいデータなどがあると思います．独自の形式やJSONなどでファイルに保存する方法もありますが，保存と復元の処理を実装するのはなかなか面倒です．&lt;/p&gt;
&lt;p&gt;みんなどうせ同じようなことをするでしょうということで，ESP32ではライブラリが用意されていました．&lt;/p&gt;
&lt;p&gt;不揮発性のフラッシュ領域を使ってデータを保存&amp;amp;復元します．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>おすすめ PDF Viewer</title>
      <link>https://kerikeri.top/posts/2016-06-14-pdf/</link>
      <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2016-06-14-pdf/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;世の中にはたくさんのPDF Viewerがあり一長一短である．AdobeのPDF Readerが有名であるが，もっと使いやすいものを見つけたのでそれを紹介する．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>回路講習会2015</title>
      <link>https://kerikeri.top/posts/2016-05-18-circuit-lecture/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2016-05-18-circuit-lecture/</guid>
      <description>&lt;h2 id=&#34;回路講習会&#34;&gt;回路講習会&lt;/h2&gt;
&lt;p&gt;東京工業大学ロボット技術研究会の平成27年度回路講習会の資料です．&lt;br&gt;
講習会は90分の講義を4回行いました．&lt;br&gt;
気持ちを込めて作りました．スライド数は200枚を超えています．どうぞご覧ください．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KiCadで自動配線</title>
      <link>https://kerikeri.top/posts/2016-04-22-freerouting/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2016-04-22-freerouting/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;figure &gt;
	
		
		&lt;figcaption&gt;
			&lt;h4&gt;KiCad&lt;/h4&gt;
		&lt;/figcaption&gt;
		
		&lt;img src=&#34;kicad.jpg&#34; alt=&#34;KiCad&#34; /&gt;
	
&lt;/figure&gt;

&lt;h3 id=&#34;自動配線ツールを使おう&#34;&gt;自動配線ツールを使おう&lt;/h3&gt;
&lt;p&gt;KiCadが流行ってきて，使う人が増えてきている．&lt;/p&gt;
&lt;p&gt;しかし，自動配線ツールを使っている人は少ない．&lt;/p&gt;
&lt;p&gt;それでははもったいない！！&lt;/p&gt;
&lt;p&gt;今回は自動配線ツールの使い方を説明する．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PICでブートローダ</title>
      <link>https://kerikeri.top/posts/2016-01-13-pic-bootloader/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2016-01-13-pic-bootloader/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;h3 id=&#34;pic18f27j53を使おう&#34;&gt;PIC18F27J53を使おう&lt;/h3&gt;
&lt;p&gt;以前 &lt;a href=&#34;https://kerikeri.top/posts/2016-01-08-pic18f27j53/&#34;&gt;PIC18F27J53のすすめ&lt;/a&gt;
 という記事を書きました。それの続きで、今回はUSBブートローダの使い方について書きたいと思います。&lt;/p&gt;
&lt;h3 id=&#34;ブートローダとは&#34;&gt;ブートローダとは&lt;/h3&gt;
&lt;p&gt;ブートローダとは自分自身にプログラムを書きこむプログラムです。これを使うとPICkitなどのライタを使わなくてもプログラムの書き込みをすることができるようになります。&lt;/p&gt;
&lt;p&gt;ただし、初回に一度だけブートローダ用のプログラムをPICkitなどで書きこむ必要があります。&lt;/p&gt;
&lt;h3 id=&#34;ユーザープログラム&#34;&gt;ユーザープログラム&lt;/h3&gt;
&lt;p&gt;ユーザープログラムとは、ブートローダーにより書き込むプログラムです。あなたが作った、実際に動かすプログラムということです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PICでUSB通信</title>
      <link>https://kerikeri.top/posts/2016-01-10-pic-usb/</link>
      <pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2016-01-10-pic-usb/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;以前 &lt;a href=&#34;https://kerikeri.top/posts/2016-01-08-pic18f27j53/&#34;&gt;PIC18F27J53のすすめ&lt;/a&gt;
 という記事を書きました。それの続きで、今回はUSBの使い方について書きたいと思います。&lt;/p&gt;
&lt;p&gt;今回紹介する方法では、USBをUARTの代わりに使えるようにするものです。PICをPCにつなぐとCOMポートが現れます。&lt;/p&gt;
&lt;p&gt;これならUSBシリアル変換モジュールを使う必要はなくります。&lt;/p&gt;
&lt;figure &gt;
	
		
		&lt;figcaption&gt;
			&lt;h4&gt;AE-FT232&lt;/h4&gt;
		&lt;/figcaption&gt;
		
		&lt;img src=&#34;FT232.jpg&#34; alt=&#34;AE-FT232&#34; /&gt;
	
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>PIC18F27J53のすすめ</title>
      <link>https://kerikeri.top/posts/2016-01-08-pic18f27j53/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2016-01-08-pic18f27j53/</guid>
      <description>&lt;h2 id=&#34;pic18f27j53のいいところ&#34;&gt;PIC18F27J53のいいところ&lt;/h2&gt;
&lt;h3 id=&#34;秋月で売っていること&#34;&gt;秋月で売っていること&lt;/h3&gt;
&lt;p&gt;電子工作をするうえでこれはとても大事なこと。「秋月で売っているなら使ってみるか」ってなりますよね。&lt;/p&gt;
&lt;p&gt;もちろん、秋月なので値段が安い！！&lt;br&gt;
&lt;strong&gt;1個270円&lt;/strong&gt;です(2016年1月現在)。&lt;/p&gt;
&lt;figure &gt;
	
		
		&lt;figcaption&gt;
			&lt;h4&gt;PIC18F27J53&lt;/h4&gt;
		&lt;/figcaption&gt;
		
		&lt;img src=&#34;view.jpg&#34; alt=&#34;PIC18F27J53&#34; style=&#34;width: 240px;&#34;/&gt;
	
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>yamyでキーボードをカスタマイズ</title>
      <link>https://kerikeri.top/posts/2016-01-07-yamy/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      <author>kerikun11&#43;web@gmail.com (けり)</author>
      <guid>https://kerikeri.top/posts/2016-01-07-yamy/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;Windowsのキーボードをカスタマイズして使いやすくする。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>